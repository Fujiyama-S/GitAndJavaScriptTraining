// DO NOT EDIT THIS FILE

addEventListener('load', () => {
  // WebSocket Connections
  const connections = {}

  // Connect to the WebSocket server used in Multiplayer
  const webSocket = new WebSocket(
    'ws' +
      (MULTIPLAYER_SERVER.indexOf('https://') !== -1 ? 's' : '') +
      '://' +
      MULTIPLAYER_SERVER.replace(/http(s*)\:\/\//, '')
  )

  // Send message to WebSocket server
  actions.send = (type, message) => {
    if (typeof message !== 'object') {
      return
    }

    message.id = ID // Player ID
    message.type = type // Message Type

    webSocket.send(JSON.stringify(message))
  }

  // Initialize the game when the connection is completed
  webSocket.addEventListener('open', createGame)

  // Received a new message from the WebSocket server
  webSocket.addEventListener('message', message => {
    let data = message.data

    // Parse
    try {
      data = JSON.parse(data)
    } catch (_) {
      return
    }

    if (typeof data !== 'object' || ID === data.id) {
      return
    }

    switch (data.type) {
      case 'message':
        if (connections[data.id]) {
          connections[data.id].say(data.message)
        }
        break
      case 'move':
        if (connections[data.id]) {
          connections[data.id].move(data.direction)
        }
        break
      case 'login':
        if (!connections[data.id]) {
          connections[data.id] = new Player(data)
          states.playerStage.addChild(connections[data.id].getStage())
          actions.send('login', {
            name: CHARACTER_NAME,
            x: states.player.x,
            y: states.player.y
          })
        }
        break
      case 'logout':
        if (connections[data.id]) {
          states.playerStage.removeChild(connections[data.id].getStage())
          delete connections[data.id]
        }
        break
    }
  })
})

addEventListener('unload', () => {
  actions.send('logout', {})
})
